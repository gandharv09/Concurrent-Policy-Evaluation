from classes import version as ver
from classes import request as req
from classes import attribute as att
import time,os,lib

config(channel='fifo')
try:
    worker = import_da("worker")
except ImportError:
    output("Failed to import worker class")

class Coordinator(process):
    def setup(numWorkers:int,coordinators:list,database:Database,objectCoordMap:dict):
        #output("Inside setup of coordinator process")
        workers = new(worker.Worker,num = numWorkers)
        setup(workers,(coordinators,database,"../config/policy.xml",objectCoordMap))
        start(workers)
        #output("Workers per coordinator have been setup")
        self.versionMap = dict()
        self.cachedUpdates = dict()
        self.readQueue = dict()
        self.writeQueue = dict()
        self.objectCoordMap = objectCoordMap
        self.workers = list(workers)
        self.workerNumber = 0
        self.numWorkers = numWorkers 

    def run():
        if (await(some(received(('evalRequest',sender, request, order))))):
            pass
        if (await(some(received(('updateReadAttr',sender, request, order))))):
            pass
        if (await(some(received(('updateObj',sender, request, order))))):
            pass
        if (await(some(received(('restartRequest',sender, request, order))))):
            pass

    def receive(msg=(str,sender, request,order)):
        if str == 'evalRequest':
            output("Received Request from Client")
            evaluate(sender, request, order)
        elif str == 'updateReadAttr':
            output("Received updateReadAttr from worker")
            updateReadAttr(sender, request, order)
        elif str == 'updateObj':
            output("Received updateObj from worker")
            updateWriteAttr(sender, request, order)
        elif str == 'restartRequest':
            output("Received restartRequest from coordinator")
            restartRequest(sender, request, order)
    
    def checkForAttrConflict(request):
        for k,v in self.writeQueue.items():
             updatedAttr = k.updateAttributes.keys()
             for obj in request.objects:
                 mightReadAttr = lib.mightReadAttr(obj, request)
                 if set(mightReadAttr).intersection(set(updatedAttr)) is not None:
                     output("This read request contains conflicting attributes")
                     if self.readQueue.get(request) is None:
                         self.readQueue[request] = list()
                         self.readQueue[request].append(k.reqId)
                     else:
                         self.readQueue.append(k.reqId)
                     return True
        return False    

    def restartRequest(sender, request, order):
        ###########################################
        # NEED TO HANDLE READ QUEUE DEPENDENT
        ###########################################
        object = lib.obj(request, order)
        for attr in lib.defReadAttr(object, request):
                v = latestVersionBefore(object, attr, request.reqTs)
                v.pendingMightRead.remove(request.reqId)

        for attr in lib.mightReadAttr(object, request):
            v = latestVersionBefore(object, attr, request.reqTs)
            v.pendingMightRead.remove(request.reqId)


        newReq = req.Request()
        newReq.objects = request.objects
        newReq.action = request.action
        newReq.clientId = request.clientId
        newReq.reqId = request.reqId
        newReq.reqTs = int(time.time())
        newReq.isWriteReq = request.isWriteReq
        newReq.mightReadAttr = request.mightReadAttr
        newReq.defReadAttr = request.defReadAttr
        newReq.mightWriteObj = request.mightWriteObj
        newReq.mightWriteAttr = request.mightWriteAttr
        evaluate(newReq.clientId, newReq, order)
        


    def evaluate(sender, request, order):

        output("....Evaluating Request....")
        
        if request.isWriteReq is False:
            output("Checking for conflicting attributes for read request")
            if checkForAttrConflict(request):
                output("Suspending read request due to conflicting attributes")
                return
         
        object = lib.obj(request, order)

        if order == 0 :
            #####################################
            # REQUEST CAME FIRST TIME , ASSIGN TS
            #####################################
            request.reqTs = int(time.time())
        output("Processing object " + str(order))

        if request.isWriteReq is False:
            
            output("Request is of type Read-Only")

            for attr in lib.defReadAttr(object, request):
                
                v = latestVersionBefore(object, attr, request.reqTs)
                v.rts = request.reqTs

            for attr in lib.mightReadAttr(object, request):
                v = latestVersionBefore(object, attr, request.reqTs)
                v.pendingMightRead.add(request.reqId)
                
        else:
            output("Request is of type Write")

            for attr in lib.defReadAttr(object, request):
                v = latestVersionBefore(object, attr, request.reqTs)
                v.pendingMightRead.add(request.reqId)

            for attr in lib.mightReadAttr(object, request):
                v = latestVersionBefore(object, attr, request.reqTs)
                v.pendingMightRead.add(request.reqId)

        output("done with latesVersionBefore update")
        logVersionMap()

        request.cachedUpdates[order] = getCachedUpdates(object, request)
        output("done with cache update")

        if order == 0:
            output("Sending to coordinator responsible for object with order 1")
            coordinatorIndex = lib.coord(lib.obj(request, 1),self.objectCoordMap)
            if coordinators[coordinatorIndex] == self.id:
                evaluate(sender, request, 1)
            else:
                send(("evalRequest", self.id, request, 1), to=coordinators[coordinatorIndex])

        else:
            workerId = (self.workerNumber) % (self.numWorkers)
            self.workerNumber += 1
            output("Coordinator sending worker request")
            request.workerCoordinatorId = self.id
            output("Setting coordinatorId to ",request.workerCoordinatorId)
            
            send(("workerRequest", request), to=self.workers[workerId])
            output("Coordinator sent worker request")

    def getCachedUpdates(object, request):
        cachedAttrs = dict()
        if self.cachedUpdates.get(object) is not None:
            output('found object ', object, ' in cache')
            cachedAttrs[object] = dict()
            attCache = self.cachedUpdates.get(object)
            
            for k,v in attCache.items():
                if k in lib.defReadAttr(object, request) or k in lib.mightReadAttr(object, request):
                    output('found attribute ', k, 'in cache')
                    attrObj = att.Attribute()
                    for attrib in v:
                        if attrib.ts <= request.reqTs and attrib.ts > attrObj.ts:
                            output('found a latestVersion of attribute', k)
                            attrObj = attrib

                    if attrObj.id is None:
                        output('Could not found a latestVersion of attribute', k)
                    else:
                        #latest version of attr k
                        cachedAttrs[object][k] = attrObj
                else:
                    output('attribute cache of object ', object, ' is empty')
        else:
            output('Could not found object ', object, ' in cache')
        return cachedAttrs            
        


    def updateReadAttr(sender, request, order):
       
        output("....Updating Read Attributes....")
        object = lib.obj(request, order)

        for attr in lib.mightReadAttr(object, request):
            v = latestVersionBefore(object, attr, request.reqTs)
            v.pendingMightRead.remove(request.reqId)
            output("REMOVED ", request.reqId)
            if attr in request.readAttributes[order]:
                v.rts = request.reqTs
        output("....Done Updating Read Attributes....")

        wReq = None
        for k,v in self.writeQueue.items():
            if request.reqId in v :
                output("Found read onnly request in write queue.Removing entry.")
                v.remove(request.reqId)
                if len(v) == 0:
                    wReq = k
                    output("Taking out write request from waiting queue, and continuing execution")
                    send(('updateObj', self.id,wReq, 1),to = request.workerCoordinatorId)
        if wReq:
            del(self.writeQueue[wReq])
            #### need to implement for write and send to handler for updateWriteAttr ###

    def updateWriteAttr(sender, request, order):

        output("....Updating Write Attributes....")
        object = lib.obj(request, order)

        self.writeQueue[request] = list()

        output("Checking for first conflict")
        if checkForConflict(object, request) is not True:
            
            
            output("conflict not found")
            for K,V in request.updateAttributes.items():
                pendingList = latestVersionBefore(object, K, request.reqTs).pendingMightRead
                output("PENDING LIST", pendingList)
                if len(pendingList) > 1 or (len(pendingList) == 1 and list(pendingList)[0] != request.reqId):
                    for reqId in pendingList:
                        if reqId != request.reqId:
                            output("adding conflicting read requests to write waiting queue and going to wait")
                            self.writeQueue[request].append(reqId)
                            return 
                           

            output("Checking for second conflict")
            if checkForConflict(object, request) is not True:
                output("conflict not found second time")

                output("....Updating DB....")
                updateDB(request)

                output("....Updating Cache....")
                updateCachedUpdates(object, request)
                
                output("....Updating Latest Version Before....")
                updateLatestVersionBefore(object, request)
                
                for attr in lib.defReadAttr(object, request):
                    v = latestVersionBefore(object, attr, request.reqTs)
                    output(v.__dict__)
                    v.pendingMightRead.remove(request.reqId)
                    if attr in request.readAttributes[request.updatedObj]:
                        v.rts = request.reqTs

                for attr in lib.mightReadAttr(object, request):
                    v = latestVersionBefore(object, attr, request.reqTs)
                    v.pendingMightRead.remove(request.reqId)
                    if attr in request.readAttributes[request.updatedObj]:
                        v.rts = request.reqTs

                del(self.writeQueue[request])
                
                output("Coordinator Sending Decision to client for Request")
                send(('evalDecision', request), to = request.clientId)

                logCacheUpdates()
                logVersionMap()

                rReq = None
                for K,V in self.readQueue.items():
                    if request.reqId in V:
                        V.remove(request.reqId)
                        if len(V) == 0:
                            #self.readQueue.remove(K)
                            rReq = K       
                            output("Restarting read Request at very start blocked by write request", rReq.reqId)
                            coordinatorIndex = lib.coord(lib.obj(request, 0),self.objectCoordMap)
                            send(("evalRequest", self.id, K, 0), to = coordinators[coordinatorIndex])
                if rReq:
                    del(self.readQueue[rReq])

            else:
                output("Restarting Request because of conflict")
                restart(object, request)
        else:
            output("Restarting Request because of conflict")
            restart(object, request)
    
    
    def restart(obj, request):

        del(self.writeQueue[request])

        ###############################################################
        # Remove writedependcy of this write req in readwaiting Queue #
        ###############################################################


        for attr in lib.defReadAttr(object, request):
                v = latestVersionBefore(object, attr, request.reqTs)
                v.pendingMightRead.remove(request.reqId)

        for attr in lib.mightReadAttr(object, request):
            v = latestVersionBefore(object, attr, request.reqTs)
            v.pendingMightRead.remove(request.reqId)

        output("done with removing reqId from pendingMightRead")
        coordinatorIndex = lib.coord(lib.obj(request, 0), self.objectCoordMap)
        output("Coordinator Sending restart request to coordinator responsible for object at order 0\n")
        send(("restartRequest",self.id, request, 0),to=coordinators[coordinatorIndex])

        
    def updateCachedUpdates(obj, request):
        if self.cachedUpdates.get(obj) is None:
            self.cachedUpdates[obj] = dict()
        
        objCache = self.cachedUpdates.get(obj)
        
        ## need to handle null case over here ##
        for K,V in request.updateAttributes.items():
            if objCache.get(K) is not None:
                #objCache.get(K).add(att.Attribute(K, V, request.reqTs))
                objCache[K].append(att.Attribute(K, V, request.reqTs))
            else:
                objCache[K] = list()
                objCache[K].append(att.Attribute(K, V, request.reqTs))

    def updateLatestVersionBefore(obj, request):

        for attr in request.updateAttributes.keys():
                v = latestVersionBefore(obj, attr, request.reqTs)
                v.wts = request.reqTs


    def updateDB( request):
        output("Inside coordinator updateDB")
        object = request.objects[request.updatedObj]
        attr = list(request.updateAttributes.keys())[0]
        timestamp = request.reqTs
        send(('write_request',object, attr, timestamp,request.updateAttributes[attr]),to = self.database)

    def checkForConflict(obj, request):
        output("Inside check for conflict")
        for K,V in request.updateAttributes.items():
            output(K,V)
            v = latestVersionBefore(obj, K, request.reqTs)
            output(v.__dict__)
            if v.rts > request.reqTs:
                return True

        return False

   

    def logCacheUpdates():
       output("---------------------CacheUpdates-----------------------------")
       for k,v in self.cachedUpdates.items():
           output("Object : ",k)
           for l,m in v.items():
               output("Attribute : ", l)
               for verObj in m:
                   output("attribute : ", verObj.__dict__)
       output("--------------------------------------------------")
       

    def logVersionMap():
       output("-----------------------VersionMap---------------------------")
       for k,v in self.versionMap.items():
           output("Object : ",k)
           for l,m in v.items():
               output("Attribute : ", l)
               for verObj in m:
                   output("version : ", verObj.__dict__)
       output("--------------------------------------------------")


    def latestVersionBefore(obj, attr, ts):

        latestVersion = None
        if self.versionMap.get(obj) is not None:
            output("Found entry for " , obj , " in latestVersionBefore" )
            attrMap = self.versionMap.get(obj)
            output(attrMap)
            versionList = attrMap.get(attr)
            if len(versionList) > 0:
                output("vesionList for ", attr, " not empty")
            
            latestVersion = versionList[0]
            for version in versionList:
                if version.wts <= ts and version.wts > latestVersion.wts:
                    latestVersion = version


            if latestVersion is None:
                latestVersion = ver.Version()
                versionList.append(latestVersion)
        else:
            output("Not Found entry for " , obj , " in latestVersionBefore" )
            latestVersion = ver.Version()
            self.versionMap[obj] = dict()
            self.versionMap[obj][attr] = []
            self.versionMap[obj][attr].append(latestVersion)
            output(self.versionMap[obj])
        if latestVersion is not None:
            return latestVersion

    def cachedUpdates(object, request):

        upd = list();

        objCache = self.cachedUpdates.get(object)
        for attr in defReadAttr(object, request):
            if objCache.get(attr) is not None:

                latestAttr = att.Attribute()
                for attrib in objCache.get(attr):
                    if attrib.ts <= request.reqTs and attrib.ts > latestAttr.ts:
                        latestAttr = attrib

                if latestAttr.ts != 0:
                    upd.append(latestAttr)

        for attr in mightReadAttr(object, request):
            if objCache.get(attr) is not None:

                latestAttr = att.Attribute()
                for attrib in objCache.get(attr):
                    if attrib.ts <= request.reqTs and attrib.ts > latestAttr.ts:
                        latestAttr = attrib

                if latestAttr.ts != 0:
                    upd.append(latestAttr)

        return upd
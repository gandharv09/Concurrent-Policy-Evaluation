from xml.etree import ElementTree as ET
import os
import lib, time
config(channel='fifo')
class Worker(process):

    def setup(coordinatorList:list, dbProcess:Database, policyFile:str,objectCoordinatorMap:dict):
        self.dbProcess=dbProcess
        self.coordinatorList = coordinatorList
        if not os.path.exists(policyFile):
            output("ERROR:Policy File does not exist")
        else:
            # policy file exists and is proper.
            self.policyFile = policyFile
        self.objectCoordinatorMap = objectCoordinatorMap

    def run():
        if await(some(received(('workerRequest',request)))):
            pass
        if await(some(received(('dbResponse',response,retVal)))):
            pass
    '''
    def receive(*args):
        output("Inside worker receive")
        if args[0] == 'workerRequest':
            output("Worker received evalRequest from coordinator")
            processCoordinatorRequest(args[1])
        if args[0] == 'dbResponse':
            output("Worker received response from db")
            evaluatePolicy(args[1], args[2])
    '''
    def receive(msg=(a,b)):
        if a == 'workerRequest':
            output("Worker received evalRequest from coordinator")
            processCoordinatorRequest(b)
        elif a == 'dbResponse':
            evaluatePolicy(b)
    
    
    
    
    def sendResponseToCoordinator(request):
        output("Worker Sending Response to coordinator")
        send(('workerResponse',request), to = request.workerCoordinatorId)

    def processCoordinatorRequest(request):
        '''
        send entire request to the database.
        database will determine mightRead and defRead and return values
        '''
        output("Worker sending read request to db")
        send(('read_request',request,self.id),to = self.dbProcess)
        
    def findRule(request):
        try:
            tree = ET.parse(policyFile)
            root = tree.getroot()
            for rule in root.iter('rule'):


                if rule.find('action').attrib.get('name') == request.action:
                        # possible candidate as action matches.
                    if request.objects[0].find(rule.find('subjectCondition').attrib.get('position'))!=-1:
                            # subject condition matched
                            # check for resource condition
                        if request.objects[1] == rule.find('resourceCondition').attrib.get('type'):
                            # resource condition also matched, valid rule found.
                            output("Found a matching rule for this policy")
                            return rule
            ## out of for loop , none of the rules matched ##
            return -1
        except :
            import traceback
            print(traceback.print_exc())
            output("XML file not in proper syntax")
            return -1

    
    def evaluatePolicy(request):
        time.sleep(1)
        output("Inside Worker Evaluate Policy")
        ################################################################
        #                                                              #
        # 1. Check for view Count attribute for movie                  #
        # 2. If viewCount exceeds then check for subscription type     #
        # 3. If both conditions return False, return False , else True #
        ################################################################
        matchedRule = findRule(request)
        attrReadFromDB = request.readDB
        if matchedRule == -1 :
            # none of the rules matched return False
            output("None of the rules matched for this request.")
            request.decision = False
            sendResponseToCoordinator(request)
                # send
        else:
            # rule matched.
            condition = matchedRule.find('resourceCondition').attrib.get('viewCount')
            output("Need to validate that viewCount ",condition)
            # first check for value in the cached updated in request.
            #output("Checking request cached updates for value")
            subscriptionType = attrReadFromDB.get(request.objects[0]).get('subscriptionType').upper()
            if subscriptionType == 'PREMIUM':
                ####################################################
                # Premium Subscription, this is a read only request#
                ####################################################
                request.readAttributes.append([])
                request.readAttributes[0].append('subscriptionType')
                request.readAttributes.append([])
                request.readAttributes[1].append('viewCount')
                request.updatedObj = None
                request.decision = True
                for i in range(2):
                    coordIndex = lib.coord(lib.obj(request,i),self.objectCoordinatorMap)
                    send(('updateReadAttr', self.id, request, i), to = self.coordinatorList[coordIndex])
                output("Worker Sending Decision to client for Read Only Request")
                send(('evalDecision', request), to = request.clientId)
                return 
            
            else:
                    # subscription is not premium, might be a write request.
                    if request.cachedUpdates.get(request.objects[1]) is not None:
                        # 'viewCount' present in cache attributes of request.
                        currentViewCount = request.cachedUpdates.get(request.objects[1]).get('viewCount')
                    else:
                        currentViewCount = attrReadFromDB.get(request.objects[1]).get('viewCount')
                        currentViewCount = int(currentViewCount)
                        allowedViewCount = int(condition[1:])
                        if (currentViewCount + 1) <= allowedViewCount:
                            # valid member can allow.
                            request.readAttributes.append([])
                            request.readAttributes[0].append('subscriptionType')
                            request.readAttributes.append([])
                            request.readAttributes[1].append('viewCount')
                            request.updateAttributes['viewCount'] = int(currentViewCount) +1
                            request.updatedObj = 1
                            request.decision = True
                            output("Worker evaluated decision to be True.")
                            output("Worker sending updated write request to coordinator ",request.workerCoordinatorId)
                            send(('updateObj', self.id,request, 1),to = request.workerCoordinatorId)
                            output("Worker sent updated write request to coodinator")
                            return
                        else:
                            # viewCount has exhausted cant allow.
                            request.readAttributes.append([])
                            request.readAttributes[0].append('subscriptionType')
                            request.readAttributes.append([])
                            request.readAttributes[1].append('viewCount')
                            request.decision = False
                            request.updatedObj = None
                            output("Worker evaluated decision to be False.")
                            output("Worker sending updated write request to coordinator")
                            send(('updateObj',self.id, request ,1), to = request.workerCoordinatorId)
                            return
                   
                        
